name: Provision SonarQube

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: environment
        description: Select the deployment environment
      deploy-tag:
        required: true
        type: string
        description: Enter the SonarQube docker tag for deployment
        default: latest
      deploy-group:
        required: true
        type: choice
        description: Enter the SonarQube group name for deployment
        options: 
          - sonarqube
      # build_id:
      #   required: true
      #   type: number
      # deploy_target:
      #   required: true
      #   type: string
      # perform_deploy:
      #   required: true
      #   type: boolean

env:
  NEXUS_DOCKER_USER: ${{ secrets.HOME_NEXUS_DOCKER_USER }}
  CONFIG_MAP: |
    home:
      sonarqube:
        vault: HOME_ANSIBLE_VAULT_KEY
        private: HOME_SSH_PRIVATE_KEY
        group: sonarqube
        tls_name: sonarqube.jamesjonesconsulting.com
        user: jam
        network: sgan

jobs:
  matrix:
    runs-on: [ self-hosted, medium, build ]
    container:
      image: nexus.jamesjonesconsulting.com:5444/jamesjonesconsulting/podman-dind-like:latest
      options: --userns=keep-id --group-add keep-groups --privileged --user root --security-opt seccomp=unconfined
      credentials:
        username: ${{ secrets.HOME_NEXUS_DOCKER_USER }}
        password: ${{ secrets.HOME_NEXUS_DOCKER_PASSWORD }}
    outputs:
      matrix: ${{ steps.github-reduced-tags.tags }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Install YQ
        uses: dcarbone/install-yq-action@v1.1.0
      - id: github-tags
        uses: JamesJonesConsulting/github.tags.action@main
        with:
          github-repo: 'SonarSource/sonarqube'
          github-max-tags: '1'
          github-filter-tags: '8'
      - id: github-reduced-tags
        name: Reduce the tags to just the unique 3 octet tags
        run: |
          TAGS=( $(cut -d '.' -f 1-3 <(echo -n -e '${{ steps.github-tags.outputs.tags }}' | jq '.tags[]' -r) | uniq | awk '{ print "\""$0"\""}') )
          echo "tags=$(jq -s '{tags: .}' <<< "${TAGS[@]}" | jq -c .)" >> $GITHUB_OUTPUT
      - name: Debug the tags
        run: |
          echo -n "${{ steps.github-reduced-tags.outputs.tags }}"
  provision:
    needs: [ matrix ]
    runs-on: [ self-hosted, medium, build ]
    container:
      image: nexus.jamesjonesconsulting.com:5444/jamesjonesconsulting/podman-dind-like:latest
      options: --userns=keep-id --group-add keep-groups --privileged --user root --security-opt seccomp=unconfined
      credentials:
        username: ${{ secrets.HOME_NEXUS_DOCKER_USER }}
        password: ${{ secrets.HOME_NEXUS_DOCKER_PASSWORD }}
    # strategy:
    #   fail-fast: false
    #   max-parallel: 1
    #   matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Get Ansible Config
        id: set-ansible-config
        run: |
          echo "ansible_config=$(echo -n '${{ env.CONFIG_MAP}}' | yq -r -o=json - | jq '.${{ inputs.environment }}.${{ inputs.deploy-group }}' -c)" >> $GITHUB_OUTPUT
      - name: Debug output
        run: |
          echo "${{ needs.matrix.outputs }}"
      # - name: Run the bash shell inside a ssh agent for Ansible
      #   uses: JamesJonesConsulting/github.bash-in-ssh-agent.action@main
      #   with:
      #     encoded-key: ${{ secrets[fromJson(steps.set-ansible-config.outputs.ansible_config).private] }}
      #     run: |
      #       git clone -b ${{ vars.ANSIBLE_INVENTORY_REPO_BRANCH }} --single-branch ${{ vars.ANSIBLE_INVENTORY_REPO }} ansible/inventory
      #       git clone -b ${{ vars.ANSIBLE_VAULT_REPO_BRANCH }} --single-branch ${{ vars.ANSIBLE_VAULT_REPO }} ansible/vault
      #       # ansible-galaxy role install -r ansible/requirements.yml -p ansible/roles -f
      #       ansible-galaxy collection install -r ansible/requirements.yml -f
      #       echo "${{ secrets[fromJson(steps.set-ansible-config.outputs.ansible_config).vault] }}" > ${RUNNER_TEMP}/.keyvault
      #       ansible-playbook --vault-password-file=${RUNNER_TEMP}/.keyvault -i ansible/inventory/${{ inputs.environment }}/hosts -u ${{ fromJson(steps.set-ansible-config.outputs.ansible_config).user }} ansible/playbook.yml -e 'inventory_group_name=${{ fromJson(steps.set-ansible-config.outputs.ansible_config).group }} inventory=${{ inputs.environment }} certpath=${{ fromJson(steps.set-ansible-config.outputs.ansible_config).group }}'
      #   env:
      #     ANSIBLE_HOST_KEY_CHECKING: False
      #     ANSIBLE_TIMEOUT: 120
      #     TAG_VERSION: ${{ inputs.deploy-tag }}
      #     HOST_NAME: ${{ fromJson(steps.set-ansible-config.outputs.ansible_config).tls_name }}
      #     SONARQUBE_DATABASE_PASSWORD: ${{ secrets.SONARQUBE_DATABASE_PASSWORD }}
      #     SONARQUBE_DATABASE_USER: ${{ secrets.SONARQUBE_DATABASE_USER }}
      #     SONARQUBE_PASSWORD: ${{ secrets.SONARQUBE_PASSWORD }}
      #     SONARQUBE_USERNAME: ${{ secrets.SONARQUBE_USERNAME }}
      #     ALLOW_EMPTY_PASSWORD: ${{ vars.ALLOW_EMPTY_PASSWORD }}
      #     SONARQUBE_DATABASE_HOST: ${{ vars.SONARQUBE_DATABASE_HOST }}
      #     SONARQUBE_DATABASE_NAME: ${{ vars.SONARQUBE_DATABASE_NAME }}
      #     SONARQUBE_DATABASE_PORT_NUMBER: ${{ vars.SONARQUBE_DATABASE_PORT_NUMBER }}
      #     SONARQUBE_EMAIL: ${{ vars.SONARQUBE_EMAIL }}